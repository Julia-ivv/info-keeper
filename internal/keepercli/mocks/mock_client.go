// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Julia-ivv/info-keeper.git/internal/proto/pb (interfaces: InfoKeeperClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	proto "github.com/Julia-ivv/info-keeper.git/internal/proto/pb"
)

// MockInfoKeeperClient is a mock of InfoKeeperClient interface.
type MockInfoKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfoKeeperClientMockRecorder
}

// MockInfoKeeperClientMockRecorder is the mock recorder for MockInfoKeeperClient.
type MockInfoKeeperClientMockRecorder struct {
	mock *MockInfoKeeperClient
}

// NewMockInfoKeeperClient creates a new mock instance.
func NewMockInfoKeeperClient(ctrl *gomock.Controller) *MockInfoKeeperClient {
	mock := &MockInfoKeeperClient{ctrl: ctrl}
	mock.recorder = &MockInfoKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoKeeperClient) EXPECT() *MockInfoKeeperClientMockRecorder {
	return m.recorder
}

// AddBinaryData mocks base method.
func (m *MockInfoKeeperClient) AddBinaryData(arg0 context.Context, arg1 *proto.AddBinaryDataRequest, arg2 ...grpc.CallOption) (*proto.AddBinaryDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBinaryData", varargs...)
	ret0, _ := ret[0].(*proto.AddBinaryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBinaryData indicates an expected call of AddBinaryData.
func (mr *MockInfoKeeperClientMockRecorder) AddBinaryData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinaryData", reflect.TypeOf((*MockInfoKeeperClient)(nil).AddBinaryData), varargs...)
}

// AddCard mocks base method.
func (m *MockInfoKeeperClient) AddCard(arg0 context.Context, arg1 *proto.AddCardRequest, arg2 ...grpc.CallOption) (*proto.AddCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCard", varargs...)
	ret0, _ := ret[0].(*proto.AddCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockInfoKeeperClientMockRecorder) AddCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockInfoKeeperClient)(nil).AddCard), varargs...)
}

// AddLogin mocks base method.
func (m *MockInfoKeeperClient) AddLogin(arg0 context.Context, arg1 *proto.AddLoginRequest, arg2 ...grpc.CallOption) (*proto.AddLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLogin", varargs...)
	ret0, _ := ret[0].(*proto.AddLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogin indicates an expected call of AddLogin.
func (mr *MockInfoKeeperClientMockRecorder) AddLogin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogin", reflect.TypeOf((*MockInfoKeeperClient)(nil).AddLogin), varargs...)
}

// AddTextData mocks base method.
func (m *MockInfoKeeperClient) AddTextData(arg0 context.Context, arg1 *proto.AddTextDataRequest, arg2 ...grpc.CallOption) (*proto.AddTextDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTextData", varargs...)
	ret0, _ := ret[0].(*proto.AddTextDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTextData indicates an expected call of AddTextData.
func (mr *MockInfoKeeperClientMockRecorder) AddTextData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextData", reflect.TypeOf((*MockInfoKeeperClient)(nil).AddTextData), varargs...)
}

// AddUser mocks base method.
func (m *MockInfoKeeperClient) AddUser(arg0 context.Context, arg1 *proto.AddUserRequest, arg2 ...grpc.CallOption) (*proto.AddUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*proto.AddUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockInfoKeeperClientMockRecorder) AddUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockInfoKeeperClient)(nil).AddUser), varargs...)
}

// AuthUser mocks base method.
func (m *MockInfoKeeperClient) AuthUser(arg0 context.Context, arg1 *proto.AuthUserRequest, arg2 ...grpc.CallOption) (*proto.AuthUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthUser", varargs...)
	ret0, _ := ret[0].(*proto.AuthUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockInfoKeeperClientMockRecorder) AuthUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockInfoKeeperClient)(nil).AuthUser), varargs...)
}

// ForceUpdateBinaryRecord mocks base method.
func (m *MockInfoKeeperClient) ForceUpdateBinaryRecord(arg0 context.Context, arg1 *proto.ForceUpdateBinaryRecordRequest, arg2 ...grpc.CallOption) (*proto.ForceUpdateBinaryRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceUpdateBinaryRecord", varargs...)
	ret0, _ := ret[0].(*proto.ForceUpdateBinaryRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUpdateBinaryRecord indicates an expected call of ForceUpdateBinaryRecord.
func (mr *MockInfoKeeperClientMockRecorder) ForceUpdateBinaryRecord(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdateBinaryRecord", reflect.TypeOf((*MockInfoKeeperClient)(nil).ForceUpdateBinaryRecord), varargs...)
}

// ForceUpdateCard mocks base method.
func (m *MockInfoKeeperClient) ForceUpdateCard(arg0 context.Context, arg1 *proto.ForceUpdateCardRequest, arg2 ...grpc.CallOption) (*proto.ForceUpdateCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceUpdateCard", varargs...)
	ret0, _ := ret[0].(*proto.ForceUpdateCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUpdateCard indicates an expected call of ForceUpdateCard.
func (mr *MockInfoKeeperClientMockRecorder) ForceUpdateCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdateCard", reflect.TypeOf((*MockInfoKeeperClient)(nil).ForceUpdateCard), varargs...)
}

// ForceUpdateLoginPwd mocks base method.
func (m *MockInfoKeeperClient) ForceUpdateLoginPwd(arg0 context.Context, arg1 *proto.ForceUpdateLoginPwdRequest, arg2 ...grpc.CallOption) (*proto.ForceUpdateLoginPwdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceUpdateLoginPwd", varargs...)
	ret0, _ := ret[0].(*proto.ForceUpdateLoginPwdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUpdateLoginPwd indicates an expected call of ForceUpdateLoginPwd.
func (mr *MockInfoKeeperClientMockRecorder) ForceUpdateLoginPwd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdateLoginPwd", reflect.TypeOf((*MockInfoKeeperClient)(nil).ForceUpdateLoginPwd), varargs...)
}

// ForceUpdateTextRecord mocks base method.
func (m *MockInfoKeeperClient) ForceUpdateTextRecord(arg0 context.Context, arg1 *proto.ForceUpdateTextRecordRequest, arg2 ...grpc.CallOption) (*proto.ForceUpdateTextRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceUpdateTextRecord", varargs...)
	ret0, _ := ret[0].(*proto.ForceUpdateTextRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceUpdateTextRecord indicates an expected call of ForceUpdateTextRecord.
func (mr *MockInfoKeeperClientMockRecorder) ForceUpdateTextRecord(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceUpdateTextRecord", reflect.TypeOf((*MockInfoKeeperClient)(nil).ForceUpdateTextRecord), varargs...)
}

// GetUserBinary mocks base method.
func (m *MockInfoKeeperClient) GetUserBinary(arg0 context.Context, arg1 *proto.GetUserBinaryRequest, arg2 ...grpc.CallOption) (*proto.GetUserBinaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserBinary", varargs...)
	ret0, _ := ret[0].(*proto.GetUserBinaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBinary indicates an expected call of GetUserBinary.
func (mr *MockInfoKeeperClientMockRecorder) GetUserBinary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBinary", reflect.TypeOf((*MockInfoKeeperClient)(nil).GetUserBinary), varargs...)
}

// GetUserCard mocks base method.
func (m *MockInfoKeeperClient) GetUserCard(arg0 context.Context, arg1 *proto.GetUserCardRequest, arg2 ...grpc.CallOption) (*proto.GetUserCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserCard", varargs...)
	ret0, _ := ret[0].(*proto.GetUserCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCard indicates an expected call of GetUserCard.
func (mr *MockInfoKeeperClientMockRecorder) GetUserCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCard", reflect.TypeOf((*MockInfoKeeperClient)(nil).GetUserCard), varargs...)
}

// GetUserLogin mocks base method.
func (m *MockInfoKeeperClient) GetUserLogin(arg0 context.Context, arg1 *proto.GetUserLoginRequest, arg2 ...grpc.CallOption) (*proto.GetUserLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserLogin", varargs...)
	ret0, _ := ret[0].(*proto.GetUserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLogin indicates an expected call of GetUserLogin.
func (mr *MockInfoKeeperClientMockRecorder) GetUserLogin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLogin", reflect.TypeOf((*MockInfoKeeperClient)(nil).GetUserLogin), varargs...)
}

// GetUserText mocks base method.
func (m *MockInfoKeeperClient) GetUserText(arg0 context.Context, arg1 *proto.GetUserTextRequest, arg2 ...grpc.CallOption) (*proto.GetUserTextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserText", varargs...)
	ret0, _ := ret[0].(*proto.GetUserTextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserText indicates an expected call of GetUserText.
func (mr *MockInfoKeeperClientMockRecorder) GetUserText(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserText", reflect.TypeOf((*MockInfoKeeperClient)(nil).GetUserText), varargs...)
}

// SyncUserData mocks base method.
func (m *MockInfoKeeperClient) SyncUserData(arg0 context.Context, arg1 *proto.SyncUserDataRequest, arg2 ...grpc.CallOption) (*proto.SyncUserDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncUserData", varargs...)
	ret0, _ := ret[0].(*proto.SyncUserDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncUserData indicates an expected call of SyncUserData.
func (mr *MockInfoKeeperClientMockRecorder) SyncUserData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncUserData", reflect.TypeOf((*MockInfoKeeperClient)(nil).SyncUserData), varargs...)
}

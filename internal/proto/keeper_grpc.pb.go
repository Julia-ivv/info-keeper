// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internal/proto/keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InfoKeeper_AddCard_FullMethodName           = "/proto.InfoKeeper/AddCard"
	InfoKeeper_AddLogin_FullMethodName          = "/proto.InfoKeeper/AddLogin"
	InfoKeeper_AddBinaryData_FullMethodName     = "/proto.InfoKeeper/AddBinaryData"
	InfoKeeper_AddTextData_FullMethodName       = "/proto.InfoKeeper/AddTextData"
	InfoKeeper_GetUserData_FullMethodName       = "/proto.InfoKeeper/GetUserData"
	InfoKeeper_GetUserCard_FullMethodName       = "/proto.InfoKeeper/GetUserCard"
	InfoKeeper_GetUserLogin_FullMethodName      = "/proto.InfoKeeper/GetUserLogin"
	InfoKeeper_GetUserTextData_FullMethodName   = "/proto.InfoKeeper/GetUserTextData"
	InfoKeeper_GetUserBinaryData_FullMethodName = "/proto.InfoKeeper/GetUserBinaryData"
)

// InfoKeeperClient is the client API for InfoKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoKeeperClient interface {
	AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*AddCardResponse, error)
	AddLogin(ctx context.Context, in *AddLoginRequest, opts ...grpc.CallOption) (*AddLoginResponse, error)
	AddBinaryData(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error)
	AddTextData(ctx context.Context, in *AddTextDataRequest, opts ...grpc.CallOption) (*AddTextDataResponse, error)
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	GetUserCard(ctx context.Context, in *GetUserCardRequest, opts ...grpc.CallOption) (*GetUserCardResponse, error)
	GetUserLogin(ctx context.Context, in *GetUserLoginRequest, opts ...grpc.CallOption) (*GetUserLoginResponse, error)
	GetUserTextData(ctx context.Context, in *GetUserTextDataRequest, opts ...grpc.CallOption) (*GetUserTextDataResponse, error)
	GetUserBinaryData(ctx context.Context, in *GetUserBinaryDataRequest, opts ...grpc.CallOption) (*GetUserBinaryDataResponse, error)
}

type infoKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoKeeperClient(cc grpc.ClientConnInterface) InfoKeeperClient {
	return &infoKeeperClient{cc}
}

func (c *infoKeeperClient) AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*AddCardResponse, error) {
	out := new(AddCardResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) AddLogin(ctx context.Context, in *AddLoginRequest, opts ...grpc.CallOption) (*AddLoginResponse, error) {
	out := new(AddLoginResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_AddLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) AddBinaryData(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error) {
	out := new(AddBinaryDataResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_AddBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) AddTextData(ctx context.Context, in *AddTextDataRequest, opts ...grpc.CallOption) (*AddTextDataResponse, error) {
	out := new(AddTextDataResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_AddTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) GetUserCard(ctx context.Context, in *GetUserCardRequest, opts ...grpc.CallOption) (*GetUserCardResponse, error) {
	out := new(GetUserCardResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_GetUserCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) GetUserLogin(ctx context.Context, in *GetUserLoginRequest, opts ...grpc.CallOption) (*GetUserLoginResponse, error) {
	out := new(GetUserLoginResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_GetUserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) GetUserTextData(ctx context.Context, in *GetUserTextDataRequest, opts ...grpc.CallOption) (*GetUserTextDataResponse, error) {
	out := new(GetUserTextDataResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_GetUserTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoKeeperClient) GetUserBinaryData(ctx context.Context, in *GetUserBinaryDataRequest, opts ...grpc.CallOption) (*GetUserBinaryDataResponse, error) {
	out := new(GetUserBinaryDataResponse)
	err := c.cc.Invoke(ctx, InfoKeeper_GetUserBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoKeeperServer is the server API for InfoKeeper service.
// All implementations must embed UnimplementedInfoKeeperServer
// for forward compatibility
type InfoKeeperServer interface {
	AddCard(context.Context, *AddCardRequest) (*AddCardResponse, error)
	AddLogin(context.Context, *AddLoginRequest) (*AddLoginResponse, error)
	AddBinaryData(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error)
	AddTextData(context.Context, *AddTextDataRequest) (*AddTextDataResponse, error)
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	GetUserCard(context.Context, *GetUserCardRequest) (*GetUserCardResponse, error)
	GetUserLogin(context.Context, *GetUserLoginRequest) (*GetUserLoginResponse, error)
	GetUserTextData(context.Context, *GetUserTextDataRequest) (*GetUserTextDataResponse, error)
	GetUserBinaryData(context.Context, *GetUserBinaryDataRequest) (*GetUserBinaryDataResponse, error)
	mustEmbedUnimplementedInfoKeeperServer()
}

// UnimplementedInfoKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedInfoKeeperServer struct {
}

func (UnimplementedInfoKeeperServer) AddCard(context.Context, *AddCardRequest) (*AddCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedInfoKeeperServer) AddLogin(context.Context, *AddLoginRequest) (*AddLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogin not implemented")
}
func (UnimplementedInfoKeeperServer) AddBinaryData(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryData not implemented")
}
func (UnimplementedInfoKeeperServer) AddTextData(context.Context, *AddTextDataRequest) (*AddTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextData not implemented")
}
func (UnimplementedInfoKeeperServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedInfoKeeperServer) GetUserCard(context.Context, *GetUserCardRequest) (*GetUserCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCard not implemented")
}
func (UnimplementedInfoKeeperServer) GetUserLogin(context.Context, *GetUserLoginRequest) (*GetUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLogin not implemented")
}
func (UnimplementedInfoKeeperServer) GetUserTextData(context.Context, *GetUserTextDataRequest) (*GetUserTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTextData not implemented")
}
func (UnimplementedInfoKeeperServer) GetUserBinaryData(context.Context, *GetUserBinaryDataRequest) (*GetUserBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBinaryData not implemented")
}
func (UnimplementedInfoKeeperServer) mustEmbedUnimplementedInfoKeeperServer() {}

// UnsafeInfoKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoKeeperServer will
// result in compilation errors.
type UnsafeInfoKeeperServer interface {
	mustEmbedUnimplementedInfoKeeperServer()
}

func RegisterInfoKeeperServer(s grpc.ServiceRegistrar, srv InfoKeeperServer) {
	s.RegisterService(&InfoKeeper_ServiceDesc, srv)
}

func _InfoKeeper_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).AddCard(ctx, req.(*AddCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_AddLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).AddLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_AddLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).AddLogin(ctx, req.(*AddLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_AddBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).AddBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_AddBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).AddBinaryData(ctx, req.(*AddBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_AddTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).AddTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_AddTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).AddTextData(ctx, req.(*AddTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_GetUserCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).GetUserCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_GetUserCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).GetUserCard(ctx, req.(*GetUserCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_GetUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).GetUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_GetUserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).GetUserLogin(ctx, req.(*GetUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_GetUserTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).GetUserTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_GetUserTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).GetUserTextData(ctx, req.(*GetUserTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoKeeper_GetUserBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoKeeperServer).GetUserBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoKeeper_GetUserBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoKeeperServer).GetUserBinaryData(ctx, req.(*GetUserBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoKeeper_ServiceDesc is the grpc.ServiceDesc for InfoKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InfoKeeper",
	HandlerType: (*InfoKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCard",
			Handler:    _InfoKeeper_AddCard_Handler,
		},
		{
			MethodName: "AddLogin",
			Handler:    _InfoKeeper_AddLogin_Handler,
		},
		{
			MethodName: "AddBinaryData",
			Handler:    _InfoKeeper_AddBinaryData_Handler,
		},
		{
			MethodName: "AddTextData",
			Handler:    _InfoKeeper_AddTextData_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _InfoKeeper_GetUserData_Handler,
		},
		{
			MethodName: "GetUserCard",
			Handler:    _InfoKeeper_GetUserCard_Handler,
		},
		{
			MethodName: "GetUserLogin",
			Handler:    _InfoKeeper_GetUserLogin_Handler,
		},
		{
			MethodName: "GetUserTextData",
			Handler:    _InfoKeeper_GetUserTextData_Handler,
		},
		{
			MethodName: "GetUserBinaryData",
			Handler:    _InfoKeeper_GetUserBinaryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/keeper.proto",
}
